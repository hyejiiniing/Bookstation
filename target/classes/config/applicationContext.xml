<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <bean id="propertyConfigurer"
             class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
			</list>
		</property>
	</bean>
    
    <!-- 커넥션 풀을 이용한 DataSource 설정 -->
	<bean id="dataSource"
       class="org.apache.commons.dbcp.BasicDataSource">
	    <property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="maxActive" value="50"/>
		<property name="maxIdle" value="30"/>
		<property name="minIdle" value="50"/>
		<property name="maxWait" value="5"/>
	</bean>
	
	<!-- 
	프로퍼티								설명
	initialSize								초기에 풀에 생성되는 커넥션의 개수
	maxActive								커넥션 풀이 제공할 최대 커넥션 개수
	maxIdle							    사용되지 않고 풀에 저장될 수 있는 최대 커넥션 개수. 음수일 경우 제한이 없다.
	minIdle									사용되지 않고 풀에 저장될 수 있는 최소 커넥션 개수.
	maxWait								풀에 커넥션이 존재하지 않을 때. 커넥션이 다시 풀에 리턴될 때 까지 대기하는 시간
	                    					단위는 1/1000초이며, -1일 경우 무한히 대기한다.
	                    					 초단위(위 5초뒤에 에러유발)
	minEvictableIdelTimeMillis		사용되지 않는 커넥션을 추출할 때 이 속성에서 지정한 시간이상 비활성화 상태인 커넥션만
											추출한다. 양수가 아닌 경우 비활성화된 시간으로는 풀에서 제거되지 않는다. 시간 단위는
											1/1000초이다.
	timeBetweenEvictionRunsMillis			사용되지 않은 커넥션을 추출하는 쓰레드의 실행 주기를 지정한다. 양수가 아닐 경우 실행되지
											않는다. 단위는 1/1000초이다.
	numTestsPerEvictionRun					사용되지 않는 커넥션을 몇 개 검사할지 지정한다.
	testOnBorrow							true일 경우 커넥션 풀에서 커넥션을 가져올 때 커넥션이 유효한지의 여부를 검사한다.
	testOnReturn							true일 경우 커넥션 풀에서 커넥션을 반환할 때 커넥션이 유효한지의 여부를 검사한다.
	testWhileIdle							true일 경우 비활성화 커넥션을 추출할 때 커넥션이 유효한지의 여부를 검사해서 유효하지 않은
											커넥션은 풀에서 제거한다.
	 -->
 <!--Mybatis설정 방법2 (직접적인 MemberMapper.xml을 작성해서 불러온다.) 
      SqlMapConfig.xml->Board.xml) X -->	 
	<bean id="sqlSessionFactory"
          		 class="org.mybatis.spring.SqlSessionFactoryBean">
     	<property name="dataSource" ref="dataSource" />      
	</bean> 

<!-- SQL구문을 어떻게 실행->결과를 받아서 처리(MemberDAO) 인터페이스
    sqlSessionFactory멤버변수->Mybatis객체를 연결
    mapperInterface멤버변수->우리가 개발할 패키지명...인터페이스이름(ex BoardDAO 인터페이스)
 -->
	<bean id="memberDAO"
       class="org.mybatis.spring.mapper.MapperFactoryBean">
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
       <property name="mapperInterface" value="com.member.dao.MemberDAO" />
 	</bean>
 
 	<bean id="bookDAO"
	       class="org.mybatis.spring.mapper.MapperFactoryBean">
	       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	       <property name="mapperInterface" value="com.member.dao.BookDAO" />
	 </bean>
	 
	 <bean id="categoryDAO"
	       class="org.mybatis.spring.mapper.MapperFactoryBean">
	       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	       <property name="mapperInterface" value="com.member.dao.CategoryDAO" />
	 </bean>
	 
	 <bean id="reviewDao"
       class="org.mybatis.spring.mapper.MapperFactoryBean">
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
       <property name="mapperInterface" value="com.member.dao.ReviewDAO" />
 	</bean>
 	
 	<bean id="orderDAO"
	       class="org.mybatis.spring.mapper.MapperFactoryBean">
	       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	       <property name="mapperInterface" value="com.member.dao.OrderDAO" />
	 </bean>
 
	<bean id="cartDAO" class="org.mybatis.spring.mapper.MapperFactoryBean">
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	    <property name="mapperInterface" value="com.member.dao.CartDAO" />
	</bean>

	 <bean id="bookcategoryDAO"
	       class="org.mybatis.spring.mapper.MapperFactoryBean">
	       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	       <property name="mapperInterface" value="com.member.dao.BookCategoryDAO" />
	 </bean>
	 
	 <bean id="allOrderDAO"
       class="org.mybatis.spring.mapper.MapperFactoryBean">
       <property name="sqlSessionFactory" ref="sqlSessionFactory" />
       <property name="mapperInterface" value="com.member.dao.AllOrderDAO" />
     </bean>
 
 <!-- 이메일 인증 관련 빈 등록 -->
   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="" /> <!-- 구글 이메일 -->
      <property name="password" value="" /> <!-- 비밀번호 -->
      <property name="javaMailProperties">
         <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
            </props>
      </property>
   </bean>
</beans>





