옮긴이 머리말 x
베타리더 후기 xi
시작하며 xiv
감사의 글 xvi
이 책에 대하여 xviii
표지에 대하여 xxi

PART I 트러블슈팅 기본 테크닉

CHAPTER 1 앱에서 모호한 부분 밝히기 3
1.1 앱을 더 쉽게 이해하는 방법 4
1.2 일반적인 코드 조사 시나리오 8
__1.2.1 예상과 다른 아웃풋의 원인을 밝힌다 9
__1.2.2 특정 기술을 습득한다 14
__1.2.3 속도 저하 이유를 알아낸다 15
__1.2.4 앱 크래시가 발생하는 이유를 이해한다 16
1.3 이 책에서 배울 내용 19
요약 20

CHAPTER 2 디버깅 기법으로 앱 로직 이해하기 21
2.1 코드 분석만으로는 불충분한 경우 23
2.2 디버거를 이용한 코드 조사 26
__2.2.1 실행 스택 트레이스란 무엇이고 어떻게 사용해야 할까? 31
__2.2.2 디버거로 코드 탐색하기 36
2.3 디버거로도 충분하지 않다면 43
요약 45

CHAPTER 3 고급 디버깅 기법으로 문제의 근본 원인 찾기 47
3.1 조건부 브레이크포인트로 조사 시간 최소화 48
3.2 실행을 중단시키지 않고도 브레이크포인트를 사용하는 방법 52
3.3 조사 시나리오를 동적으로 변경하기 55
3.4 조사 케이스를 되감기 58
요약 64

CHAPTER 4 원격 앱 디버깅 65
4.1 원격 디버깅이란? 66
4.2 원격 환경에서 조사하기 69
__4.2.1 시나리오 70
__4.2.2 원격 환경의 문제 조사하기 71
요약 81

CHAPTER 5 로그를 활용하여 앱 동작 감시하기 83
5.1 로그를 이용하여 조사하기 87
__5.1.1 로그에 기록된 예외 식별 88
__5.1.2 예외 스택 트레이스로 어디서 메서드를 호출했는지 식별 89
__5.1.3 멀티스레드 아키텍처에서 커맨드의 실행 시간 측정 91
__5.1.4 멀티스레드 아키텍처에서 커맨드 실행 문제 조사 92
5.2 로깅을 구현하는 방법 94
__5.2.1 로그 메시지 저장 94
__5.2.2 로깅 레벨을 정의하고 로깅 프레임워크를 사용하는 방법 95
__5.2.3 로깅 때문에 발생하는 문제와 예방 조치 102
5.3 로그와 원격 디버깅 107
요약 108

PART II 트러블슈팅 고급 테크닉

CHAPTER 6 프로파일링 기법으로 리소스 사용 문제 파악하기 111
6.1 프로파일러는 어떤 경우에 유용할까? 112
__6.1.1 비정상적인 리소스 사용량 식별 112
__6.1.2 실행되는 코드 찾기 113
__6.1.3 앱 실행 속도가 느려지는 원인을 파악 114
6.2 프로파일러 사용 방법 114
__6.2.1 VisualVM 설치 및 구성 115
__6.2.2 CPU와 메모리 사용량 관찰 117
__6.2.3 메모리 누수 현상 식별 127
요약 132

CHAPTER 7 프로파일링 기법으로 숨겨진 이슈 찾기 133
7.1 샘플링으로 실행되는 코드 관찰 134
7.2 프로파일링으로 메서드의 실행 횟수 파악 142
7.3 프로파일러로 앱이 실제로 실행하는 SQL 쿼리 파악 144
__7.3.1 프로파일러로 프레임워크에서 생성되지 않은 SQL 쿼리 식별 144
__7.3.2 프로파일러로 프레임워크에서 생성된 SQL 쿼리 식별 150
__7.3.3 프로파일러로 프로그램에서 생성된 SQL 쿼리 식별 153
요약 157

CHAPTER 8 프로파일링한 데이터에 고급 시각화 도구 적용하기 159
8.1 JDBC 접속 문제 감지 160
8.2 호출 그래프를 보고 앱의 코드 설계 파악 173
8.3 플레임 그래프를 그려 성능 문제 밝히기 175
8.4 NoSQL DB에서의 쿼리 분석 179
요약 180

CHAPTER 9 멀티스레드 아키텍처의 락 문제 조사하기 183
9.1 스레드 락 모니터링 184
9.2 스레드 락 분석 189
9.3 대기 중인 스레드 분석 198
요약 205

CHAPTER 10 스레드 덤프로 데드락 문제 조사하기 207
10.1 스레드 덤프 수집하기 208
__10.1.1 프로파일러로 스레드 덤프 수집 210
__10.1.2 커맨드 라인에서 스레드 덤프 수집 212
10.2 스레드 덤프를 읽는 방법 215
__10.2.1 일반 텍스트 스레드 덤프 216
__10.2.2 도구를 활용하여 스레드 덤프 읽기 222
요약 225

CHAPTER 11 앱 실행 중 메모리 관련 이슈 찾기 227
11.1 샘플링과 프로파일링으로 메모리 이슈 진단 228
11.2 힙 덤프를 수집하여 메모리 누수가 발생하는 곳 찾기 235
__11.2.1 힙 덤프 수집 236
__11.2.2 힙 덤프 읽는 방법 240
__11.2.3 OQL 콘솔에서 힙 덤프 쿼리 245
요약 251

PART III 대규모 시스템의 트러블슈팅

CHAPTER 12 대규모 시스템에 배포된 앱의 동작 조사하기 255
12.1 서비스 간 통신 문제 조사 256
__12.1.1 HTTP 서버 프로브로 HTTP 요청 관찰 257
__12.1.2 HTTP 클라이언트 프로브로 앱이 보낸 HTTP 요청 관찰 259
__12.1.3 소켓의 로 레벨 이벤트 조사 261
12.2 통합 로그 모니터링의 중요성 263
12.3 배포 도구를 조사에 활용하는 법 270
__12.3.1 결함 주입으로 재현하기 곤란한 문제를 비슷하게 모방 272
__12.3.2 미러링 기법을 테스트 및 에러 감지에 활용 273
요약 274

APPENDIX A 이 책에서 사용한 도구 275

APPENDIX B 프로젝트 열기 277

APPENDIX C 기타 참고 도서 279

APPENDIX D 자바 스레드 이해 281
D.1 스레드란 무엇인가? 282
D.2 스레드의 수명 주기 284
D.3 스레드 동기화 286
__D.3.1 동기화 블록 286
__D.3.2 wait(), notify(), notifyAll() 사용 289
__D.3.3 스레드 조인 290
__D.3.4 정해진 시간 동안 스레드 차단 291
__D.3.5 스레드와 블로킹 객체 동기화하기 292
D.4 멀티스레드 아키텍처의 일반적인 문제 293
__D.4.1 경쟁 상태 293
__D.4.2 데드락 294
__D.4.3 리브락 295
__D.4.4 기아 296
D.5 추가 자료 297

APPENDIX E 자바 메모리 관리 체계 299
E.1 JVM이 앱의 메모리를 구성하는 방법 300
E.2 스레드가 로컬 데이터를 저장하는 데 사용하는 스택 302
E.3 앱이 객체 인스턴스를 저장하는 데 사용하는 힙 308
E.4 데이터 유형을 저장하기 위한 메타스페이스 메모리 위치 311

찾아보기 313