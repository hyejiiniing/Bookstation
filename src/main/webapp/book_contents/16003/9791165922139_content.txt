서문
저자 소개
베타 리더 추천사

CHAPTER 01. 클라우드 환경 현황
1.1 개요
1.1.1 클라우드 컴퓨팅은 왜 탄생하게 되었고 어떠한 변화를 거쳐왔는가?
1.1.2 클라우드와 가상화의 차이점
1.1.3 기존 레거시 플랫폼 대비 클라우드의 특징
1.1.4 IaaS, PaaS, SaaS의 개요와 차이점 알아보기

1.2 클라우드 컴퓨팅의 변화
1.2.1 시장을 주도한 IaaS의 기여도
1.2.2 IaaS에서 PaaS로 진화하고 있는 배경

CHAPTER 02. 떠오르고 있는 PaaS 이야기
2.1 PaaS의 개요
2.1.1 PaaS란 무엇인가?
2.1.2 PaaS의 목적
2.1.3 PaaS에 적합한 플랫폼은?

2.2 컨테이너의 부상
2.2.1 컨테이너란?
2.2.2 컨테이너의 역사
2.2.3 컨테이너가 클라우드 인프라의 핵심으로 각광받는 이유
2.2.4 컨테이너의 특징
2.2.5 도커 이미지, 컨테이너와 런타임
2.2.6 컨테이너의 장점과 단점
2.2.7 컨테이너의 비즈니스적인 이점
2.2.8 컨테이너의 표준화

2.3 컨테이너 오케스트레이션의 역할
2.3.1 컨테이너 오케스트레이션은 왜 필요한가?
2.3.2 오케스트레이션을 독식하게 된 쿠버네티스
2.3.3 쿠버네티스의 개요
2.3.4 쿠버네티스의 아키텍처
2.3.5 쿠버네티스에서 주로 사용하는 용어
2.3.6 쿠버네티스와 에코 솔루션들, 그리고 CNCF의 역할
2.3.7 쿠버네티스와 컨테이너 기반 PaaS 구성을 위한 아키텍처와 스택들
2.3.8 PaaS 구성을 위한 인하우스 개발과 패키지 솔루션의 차이점

CHAPTER 03. 쿠버네티스의 실전 활용법과 디지털 플랫폼 혁신 사례들
3.1 애플리케이션 현대화를 위해 무엇을 준비해야 할까?
3.1.1 현대화의 정의
3.1.2 현대화를 위한 플랫폼 구성 요소들
3.1.3 국내 대기업의 현대화를 통한 생산성 혁신 사례 소개
3.1.4 국내 중견기업의 ERP시스템의 현대화 사례

3.2 디지털 트랜스 포메이션에 성공하기 위한 방법은?
3.2.1 디지털 트랜스 포메이션의 단상
3.2.2 디지털 트랜스 포메이션과 클라우드, 그리고 플랫폼 구성 요소들
3.2.3 클라우드 네이티브 아키텍처에 대하여
3.2.4 국내 카드사의 ABC 기반 디지털 플랫폼 혁신 사례

3.3 DevOps를 통한 개발 생산성을 극대화하려면?
3.3.1 DevOps가 지향하는 목표
3.3.2 쿠버네티스 기반 DevOps 구성 시 고려사항과 아키텍처링
3.3.3 대두되고 있는 GitOps
3.3.4 국내 중견기업의 DevOps를 통한 생산성 혁신의 사례

3.4 MSA를 위해 인프라는 어떤 방식으로 구성할까?
3.4.1 MSA는 왜 필요하게 되었는가?
3.4.2 MSA에 적합한 인프라는?
3.4.3 MSA 인프라 아키텍처링 시 고려사항들
3.4.4 서비스 메시와 API GW의 차이점
3.4.5 서비스 메시로 할 수 있는 일들
3.4.6 국내 A 기관이 MSA로 전환할 수밖에 없었던 이유

3.5 멀티/하이브리드 클라우드는 어떻게 운영해야 할까?
3.5.1 멀티/하이브리드 클라우드란?
3.5.2 하이브리드 클라우드의 유형
3.5.3 멀티/하이브리드 클라우드에서 컨테이너가 부상한 이유
3.5.4 국내 L 기관의 하이브리드 클라우드를 통한 혁신적인 비용 절감 사례

3.6 비용 효율적인 Active-Active 데이터센터와 재해복구
3.6.1 재해복구의 현황과 불편한 진실
3.6.2 재해복구 구축과 유지비용 문제의 해결
3.6.3 재해복구 복잡성의 해결
3.6.4 복구 성공률을 높이기 위한 쿠버네티스의 활용
3.6.5 쿠버네티스 환경의 재해복구 형태

3.7 기존 레거시 대비 쿠버네티스로 인한 변화와 장점 정리
3.7.1 시스템 자원 관리
3.7.2 환경변수의 영향도
3.7.3 애플리케이션의 배포
3.7.4 서비스 장애의 처리
3.7.5 로그 관리

마치는 말
찾아보기